---
- name: Topology Configuration
  hosts: localhost
  gather_facts: no
  vars:
    cgclients: []
    ddosclients: []
    
  tasks:
    - name: Create namespace
      command: kne create /home/mw/kne/examples/cisco/conversion/Topologias/ddos/prueba.yaml
      
      
    - name: Include client counts
      include_vars:
        file: clients_number.yaml
        
    - name: Create cgclients
      set_fact:
        cgclients: "{{ cgclients + [{'name': 'cgclient' ~ item, 'pod': 'cgclient' ~ item}] }}"
      loop: "{{ range(1, cg_count + 1)|list }}"

    - name: Create ddosclients
      set_fact:
        ddosclients: "{{ ddosclients + [{'name': 'ddosclient' ~ item, 'pod': 'ddosclient' ~ item}] }}"
      loop: "{{ range(1, ddos_count + 1)|list }}"


        
    - name: Configure cgserver
      command: kubectl exec -it -n ddos cgserver -- python3 cgserver-config.py
      
    - name: Configure ddosserver
      command: kubectl exec -it -n ddos ddosserver -- python3 ddosserver-config.py



    - name: Get cgserver IP
      shell: "kubectl exec -n ddos cgserver -- ip addr show eth1 | awk '/inet / {gsub(/\\/\\/[0-9]+/, \"\", $2); print $2}'"
      register: cgserver_ip_output
      changed_when: false
      ignore_errors: yes

    - name: Extract IP from cgserver_ip_output
      set_fact:
        cgserver_ip: "{{ cgserver_ip_output.stdout.split('/')[0] }}"
        
    - name: Debug cgserverip
      debug:
        var: cgserver_ip

    - name: Get ddosserver IP
      shell: "kubectl exec -n ddos ddosserver -- ip addr show eth1 | awk '/inet / {gsub(/\\/\\/[0-9]+/, \"\", $2); print $2}'"
      register: ddosserver_ip_output
      changed_when: false
      ignore_errors: yes

    - name: Set ddosserver IP as a fact
      set_fact:
        ddosserver_ip: "{{ ddosserver_ip_output.stdout.split('/')[0] }}"
        
    - name: Debug ddosserverip
      debug:
        var: ddosserver_ip


    
    - name: Create ConfigMap YAML
      command: kubectl create configmap my-environment --from-literal=cgserver={{ cgserver_ip }} --from-literal=ddosserver={{ ddosserver_ip }} --namespace=default --dry-run=client -o yaml
      register: configmap_yaml
      changed_when: false

    
    - name: Apply ConfigMap
      command: kubectl apply -f -
      args:
        stdin: "{{ configmap_yaml.stdout }}"
      when: configmap_yaml.stdout is defined 
      
      
    
    - name: Delete namespace
      command: kne delete /home/mw/kne/examples/cisco/conversion/Topologias/ddos/prueba.yaml
      
    - name: Pause 10 sec
      pause:
        seconds: 10
    
    - name: Create namespace
      command: kne create /home/mw/kne/examples/cisco/conversion/Topologias/ddos/prueba.yaml

      
      
    - name: Configure cgserver
      command: kubectl exec -it -n ddos cgserver -- python3 cgserver-config.py
    - name: Configure ddosserver
      command: kubectl exec -it -n ddos ddosserver -- python3 ddosserver-config.py

    - name: "Configure {{ client.pod }}"
      command: kubectl exec -it -n ddos {{ client.pod }} -- python3 {{ client.name }}-config.py
      loop: "{{ cgclients + ddosclients }}"
      loop_control:
        loop_var: client



